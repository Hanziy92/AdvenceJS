{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;AAAY;AACZ;AACA;AACA,yCAAyC;AACzC,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,OAAO;AACP,IAAI;AACJ;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,IAAI,IAAI,QAAQ;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA,yBAAyB;AACzB;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,WAAW,EAAE,cAAc,YAAY,UAAU;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCheA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBY;AACZ;AACA,iBAAiB,mBAAO,CAAC,gCAAQ;AACjC;AACA;AACA;AACA;AACA,sB","sources":["webpack:///./src/js/main.js","webpack:///webpack/bootstrap","webpack:///./src/js/script.js"],"sourcesContent":["'use strict'\r\n\r\n// JSON ВСІ СТРОКИ В \"\" - лапках\r\n// console.log(JSON.stringify(persone)); // ПЕРЕТВОРЮЄ ДЛЯ В ФОРМАТ JSON \r\n// console.log(JSON.parse(JSON.stringify(persone))); // pares НАОБОРОТ з JSON \r\n\r\n// const persone = {\r\n//    name: 'Alex',\r\n//    tel: '+34444444',\r\n//    parents: {\r\n//       mom: 'Olga',\r\n//       dad: 'Mike'\r\n//    }\r\n// };\r\n\r\n// const clone = JSON.parse(JSON.stringify(persone));\r\n// clone.parents.mom = 'Ann';\r\n\r\n// console.log(persone);\r\n// console.log(clone);\r\n\r\n\r\n// AJAX \r\n// const inputUah = document.querySelector('#uah'),\r\n//       inputUsd = document.querySelector('#usd');\r\n\r\n// inputUah.addEventListener('input', () => {\r\n//    const request = new XMLHttpRequest();\r\n//    request.open('GET', '/current.json'); // метод запросу argument 5 - method, url, async, login, pass.\r\n//    request.setRequestHeader('Content-type', 'application/json; charset=utf-8');\r\n//    request.send();\r\n\r\n\r\n   // ПОДІЇ  REST\r\n   // request.addEventListener('readystatechange', () => {\r\n   //    if (request.readyState === 4 && request.status === 200) {\r\n   //       console.log(request.response);\r\n   //       const data = JSON.parse(request.response);\r\n   //       inputUsd.value = (+inputUah / data.current.usd).toFixed(2);\r\n   //    } else {\r\n   //       inputUsd.value = 'Щось пішло не так';\r\n   //    }\r\n\r\n\r\n   //    request.addEventListener('load', () => {\r\n   //       if (request.status === 200) {\r\n   //          const data = JSON.parse(request.response);\r\n   //          inputUsd.value = (+inputUah.value * data.current.usd).toFixed(2);\r\n   //       } else {\r\n   //          inputUsd.value = 'Щось пішло не так';\r\n   //       }\r\n\r\n   // });\r\n   // СВОЙСТВА:\r\n   // status \r\n   // statusText\r\n   // Response ВІДПОВІДЬ ВІД СЕРВЕРА\r\n   // readyState \r\n\r\n   \r\n// });\r\n\r\n\r\n\r\n// PROMISE (ES6)\r\n\r\n// console.log('get data.....');\r\n// створити проміс\r\n// МАй два аргумента RESOLTE - коли все добре;    REJECT - коли щось пішло не так;\r\n// const req = new Promise(function(resolte, reject) {\r\n//    setTimeout(() => {\r\n//       console.log('підготовка даних.....');  \r\n//       const product = {\r\n//          name: 'TV',\r\n//          prise: 2000\r\n//       };  \r\n//    resolte(product); \r\n   \r\n//    }, 2000);\r\n// });\r\n// then приймає аргумент з resolte\r\n// req.then((product) => {\r\n//    return new Promise((resolte, reject) => {\r\n//       setTimeout(() => {\r\n//          product.ststus = 'order';\r\n//          resolte(product);\r\n//       }, 2000);\r\n//    });\r\n// }).then(data => {\r\n//       data.modify = true;\r\n//       return data;\r\n// }).then((data) => {\r\n//       console.log(data);\r\n// });  \r\n\r\n// REJECT catch - коли щось не получилось\r\n\r\n// req.then((product) => {\r\n//    return new Promise((resolte, reject) => {\r\n//       setTimeout(() => {\r\n//          product.ststus = 'order';\r\n//          reject();\r\n//       }, 2000);\r\n//    });\r\n// }).then(data => {\r\n//       data.modify = true;\r\n//       return data;\r\n// }).then((data) => {\r\n//       console.log(data);\r\n// }).catch(() => {\r\n//    console.error('Error');\r\n// });\r\n\r\n\r\n// FINNALY - запустится полюбе\r\n// req.then((product) => {\r\n//    return new Promise((resolte, reject) => {\r\n//       setTimeout(() => {\r\n//          product.ststus = 'order';\r\n//          resolte(product);\r\n//       }, 2000);\r\n//    });\r\n// }).then(data => {\r\n//       data.modify = true;\r\n//       return data;\r\n// }).then((data) => {\r\n//       console.log(data);\r\n// }).catch(() => {\r\n//       console.error('Error');\r\n// }).finally(() => {\r\n//    console.log('fannily');\r\n// });\r\n\r\n\r\n// const test = time => {\r\n//    return new Promise(resolte => {\r\n//       setTimeout(() => resolte(), time);\r\n//    });\r\n// };\r\n\r\n// test(1000).then(() => console.log('1000 ms'));\r\n// test(2000).then(() => console.log('2000 ms'));\r\n\r\n\r\n// ALL чекає виконання всіх промісів аж тоді спрацьовує\r\n// Promise.all([test(1000), test(2000)]).then(() => {\r\n//    console.log('All');\r\n// });\r\n\r\n// // RACE - якщо виконався перший проміс тоді спрацьовує всіх не чекає\r\n// Promise.race([test(1000), test(2000)]).then(() => {\r\n//    console.log('All');\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n\r\n// API Fetch\r\n\r\n\r\n// fetch('https://jsonplaceholder.typicode.com/posts', {\r\n//       method: \"POST\",\r\n//       body: JSON.stringify({name:' Alex'}),\r\n//       headers: {\r\n//          'Content-type': 'application/json'\r\n//       }\r\n//    })\r\n//    .then(response => response.json())\r\n//    .then(json => console.log(json));\r\n\r\n//    fetch('https://jsonplaceholder.typicode.com/todos/1')\r\n//       .then(response => response.json())\r\n//       .then(json => console.log(json));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// МЕТОДИ ПЕРЕБОРА МАСИВА\r\n\r\n// filter \r\n// const names = ['Petro', 'Ann', 'Kristina', 'Jonh'];\r\n\r\n// const shortNames = names.filter((name) => {\r\n//    return name.length < 5;\r\n// });\r\n\r\n// console.log(shortNames);\r\n\r\n\r\n// map\r\n// const answers = ['PeTro', 'AnnA', 'Hello'];\r\n// const result = answers.map(item => item.toLowerCase());\r\n// console.log(result);\r\n\r\n\r\n// так краще не робити\r\n// let answers = ['PeTro', 'AnnA', 'Hello'];\r\n// answers = answers.map(item => item.toLowerCase());\r\n// console.log(answers);\r\n\r\n\r\n// every/some - return bool\r\n\r\n// const some = [4, 'qwer', 'asdfasdf'];\r\n// [хоть один  елемент співпадає return true]\r\n// console.log(some.some(item => typeof(item) === 'number'));\r\n\r\n// [Всі мають бути однаковими return true]\r\n\r\n\r\n// reduce - збирає масив в одне ціле \r\n\r\n// const arr = [2, 4, 6, 1, 3, 5];\r\n// Перший аргумент це сумв всіх, другий це дані масиву\r\n// const result = arr.reduce((sum, current) => sum + current);\r\n// console.log(result);\r\n\r\n\r\n// const arr = ['apple', 'pear', 'plum'];\r\n// const result = arr.reduce((sum, current) => `${sum}, ${current}`);\r\n// console.log(result);\r\n\r\n// const arr = [2, 4, 6, 1, 3, 5];\r\n// третій аргумент початкове значення яке додасться в першй аргумент\r\n// const result = arr.reduce((sum, current) => sum + current, 3);\r\n// console.log(result);\r\n\r\n// const obj = {\r\n//    petro: 'persone',\r\n//    lilay: 'persone',\r\n//    dog: 'animal',\r\n//    cat: 'animal'\r\n// };\r\n\r\n// const newArr = Object.entries(obj)\r\n// .filter(item => item[1] === 'persone')\r\n// .map(item => item[0]);\r\n\r\n// console.log(newArr);\r\n\r\n\r\n\r\n\r\n\r\n// fetch('http://localhost:3000/text')\r\n// .then(data => data.json())\r\n// .then(res => console.log(res));\r\n\r\n\r\n\r\n/// LOCAL STORAGE\r\n\r\n// localStorage.setItem('number', '5'); // add db\r\n\r\n// localStorage.removeItem('number'); \r\n\r\n// localStorage.clear(); // clear db all\r\n\r\n// console.log(localStorage.getItem('number')); // get out of db\r\n\r\n// const checkbox = document.querySelector('#checkbox'),\r\n//       form = document.querySelector('form'),\r\n//       change = document.querySelector('#color');\r\n\r\n\r\n// if (localStorage.getItem('isChecked')) {\r\n//    checkbox.checked = true;\r\n// }\r\n\r\n// if (localStorage.getItem('bg') === 'changed') {\r\n//    form.style.backgroundColor = 'red';\r\n// }\r\n\r\n// checkbox.addEventListener('change', () => {\r\n//    localStorage.setItem('isChecked', true);\r\n// });\r\n\r\n// change.addEventListener('click', () => {\r\n//    if (localStorage.getItem('bg') === 'changed') {\r\n//       localStorage.removeItem('bg');\r\n//       form.style.backgroundColor = '#fff';\r\n//    } else {\r\n//       localStorage.setItem('bg', 'changed');\r\n//       form.style.backgroundColor = 'red';\r\n//    }\r\n// });\r\n\r\n// const persone = {\r\n//    name: 'Alex',\r\n//    age: 25\r\n// };\r\n\r\n// const serializedPersone = JSON.stringify(persone);\r\n\r\n// localStorage.setItem('Alex', serializedPersone);\r\n\r\n// console.log(JSON.parse(localStorage.getItem('Alex')));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// РЕГУЛЯРНІ ВИРАЗИ (ддя роботи з рядками)\r\n\r\n\r\n// new RegExp('pattern', 'flags');\r\n// /pattern/f\r\n\r\n// const ans = prompt('введіть ваше імя');\r\n// const reg = /n/ig;\r\n\r\n\r\n\r\n// flags\r\n// i - находить незалежно від регістра\r\n// g - найти багато входжень\r\n// m - багатострочний режим\r\n\r\n// Class\r\n\r\n// \\D - не числа\r\n// \\W - не букви\r\n\r\n\r\n\r\n\r\n// \\d - шукаєм цифри\r\n// \\w - шукаєм всі букви слова\r\n// \\s - шукаєм пробіли\r\n\r\n\r\n// console.log(ans.search(reg));\r\n\r\n\r\n// return arr\r\n// console.log(ans.match(reg));\r\n\r\n// const pass = prompt('Password');\r\n\r\n// replace - має два аргументи 1 -що ми міняєм а другий на що ми міняєм\r\n// console.log(pass.replace(/\\./g, \"*\")); - рекрамінування \\\r\n// console.log(pass.replace(/./g, \"*\"));\r\n\r\n// console.log('12-34-56'.replace(/-/g, \":\"));\r\n\r\n// method test return bool\r\n// const ans = prompt('введіть ваше імя');\r\n// const reg = /n/ig;\r\n// console.log(reg.test(ans));\r\n\r\n// class\r\n// const ans = prompt('введіть ваше number');\r\n// const reg = /\\d/g;\r\n// console.log(ans.match(reg));\r\n\r\n// const str = 'My name is R2D2';\r\n\r\n// console.log(str.match(/\\w\\d\\w\\d/i));\r\n\r\n\r\n// const str = 'My name is R2D2';\r\n\r\n// console.log(str.match(/\\W/i));\r\n// console.log(str.match(/\\D/ig));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// SET GET\r\n\r\n// const persone = {\r\n//    name: \"Alex\",\r\n//    age: 25,\r\n\r\n//    get userAge() {\r\n//       return this.age;\r\n//    },\r\n\r\n//    set userAge(num) {\r\n//       this.age = num;\r\n//    }\r\n// };\r\n\r\n// console.log(persone.userAge = 30);\r\n// console.log(persone.userAge); \r\n\r\n\r\n\r\n\r\n\r\n// Encapsulation\r\n\r\n// class User {\r\n//    constructor(name, age) {\r\n//        this.name = name;\r\n//        this._age = age;\r\n//    }\r\n\r\n//    #surname = 'Ganzii';\r\n//    say = () => {\r\n//        console.log(`Имя пользователя: ${this.name} ${this.#surname}, возраст ${this._age}`);\r\n//    }\r\n\r\n//    get age() {\r\n//        return this._age;\r\n//    }\r\n\r\n//    set age(age) {\r\n//        if (typeof age === 'number' && age > 0 && age < 110) {\r\n//            this._age = age;\r\n//        } else {\r\n//            console.log('Error!');\r\n//        }\r\n//    }\r\n// }\r\n\r\n// const petro = new User('Petro', 27);\r\n// console.log(petro.age);\r\n// petro.age = 99;\r\n// console.log(petro.age);\r\n// petro.say()\r\n\r\n\r\n\r\n// МОДУЛІ\r\n\r\n// const app = '123';\r\n// const number = 1;\r\n// // Анонімна самовикликаюча функція\r\n// (function(){\r\n//    let number = 2;\r\n//    console.log(number);\r\n//    console.log(number + 3);\r\n// }());\r\n\r\n// console.log(number);\r\n\r\n\r\n// //  обєктний інтерфейс\r\n\r\n// const user = (function(){\r\n//    let privat = function () {\r\n//       console.log('I am privat');\r\n//    };\r\n//    return {\r\n//       sayHello: privat\r\n//    };\r\n// }());\r\n\r\n// user.sayHello();\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction myModuls() {\r\n   this.hello = function() {\r\n      console.log('Hello');\r\n   };\r\n\r\n   this.goodbye = function() {\r\n      console.log('bye!');\r\n   };\r\n}\r\n\r\nmodule.exports = myModuls;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","'use strict'\r\n\r\nconst myModuls = require('./main');\r\n\r\nconst myModuleIns = new myModuls();\r\n\r\nmyModuleIns.hello();\r\nmyModuleIns.goodbye();"],"names":[],"sourceRoot":""}